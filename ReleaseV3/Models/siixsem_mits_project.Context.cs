//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReleaseMonitorV4.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class siixsem_mits_projectEntities : DbContext
    {
        public siixsem_mits_projectEntities()
            : base("name=siixsem_mits_projectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<getMaxPanel_Result> getMaxPanel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMaxPanel_Result>("getMaxPanel");
        }
    
        public virtual ObjectResult<InsertDoubleSerials_Result> InsertDoubleSerials(string model, string c, string s, Nullable<int> panel, Nullable<int> image, string batch)
        {
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var cParameter = c != null ?
                new ObjectParameter("C", c) :
                new ObjectParameter("C", typeof(string));
    
            var sParameter = s != null ?
                new ObjectParameter("S", s) :
                new ObjectParameter("S", typeof(string));
    
            var panelParameter = panel.HasValue ?
                new ObjectParameter("panel", panel) :
                new ObjectParameter("panel", typeof(int));
    
            var imageParameter = image.HasValue ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("batch", batch) :
                new ObjectParameter("batch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertDoubleSerials_Result>("InsertDoubleSerials", modelParameter, cParameter, sParameter, panelParameter, imageParameter, batchParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertError(string serial, string operation, string description)
        {
            var serialParameter = serial != null ?
                new ObjectParameter("serial", serial) :
                new ObjectParameter("serial", typeof(string));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertError", serialParameter, operationParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<mitsPorcedure_Result> mitsPorcedure(string funct, string model, string c, Nullable<int> panel, Nullable<int> image, string batch)
        {
            var functParameter = funct != null ?
                new ObjectParameter("funct", funct) :
                new ObjectParameter("funct", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var cParameter = c != null ?
                new ObjectParameter("C", c) :
                new ObjectParameter("C", typeof(string));
    
            var panelParameter = panel.HasValue ?
                new ObjectParameter("panel", panel) :
                new ObjectParameter("panel", typeof(int));
    
            var imageParameter = image.HasValue ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("batch", batch) :
                new ObjectParameter("batch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mitsPorcedure_Result>("mitsPorcedure", functParameter, modelParameter, cParameter, panelParameter, imageParameter, batchParameter);
        }
    
        public virtual ObjectResult<getReleasePath_Result> getReleasePath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getReleasePath_Result>("getReleasePath");
        }
    
        public virtual ObjectResult<existSerialC_Result> existSerialC(string serial)
        {
            var serialParameter = serial != null ?
                new ObjectParameter("serial", serial) :
                new ObjectParameter("serial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<existSerialC_Result>("existSerialC", serialParameter);
        }
    }
}
